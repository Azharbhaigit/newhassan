## Create VPC ##
resource "aws_vpc" "terraform-vpc" {
  cidr_block       = "172.16.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "terraform-test-vpc"
  }
}
## Create Subnet 1 ##
resource "aws_subnet" "terraform-subnet_1" {
  vpc_id     = "${aws_vpc.terraform-vpc.id}"
  cidr_block = "172.16.10.0/24"
  availability_zone = "us-west-2a"
  tags = {
    Name = "terraform-subnet_1"
  }
}
## Create Subnet 2 ##
resource "aws_subnet" "terraform-subnet_2" {
  vpc_id     = "${aws_vpc.terraform-vpc.id}"
  cidr_block = "172.16.11.0/24"
  availability_zone = "us-west-2b"

  tags = {
    Name = "terraform-subnet_2"
  }
}
##Create IGW for VPC
resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.terraform-vpc.id}"

  tags = {
    Name = "terraform-vpc-igw"
  }
}
##Grant internet access on its main route table:
resource "aws_route" "route" {
  route_table_id         = "${aws_vpc.terraform-vpc.main_route_table_id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.gw.id}"
}
## Create Security Group for EC2-servers
resource "aws_security_group" "ec2_sg" {
  description = "Allow SSH traffic"
  vpc_id      = "${aws_vpc.terraform-vpc.id}"
  name        = "terraform_ec2_private_sg"

  ingress {
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]##Change this to your OWN IP ADDRESS
    from_port   = 22
    to_port     = 22
  }

  egress {
    protocol    = -1
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    to_port     = 0
  }

  tags = {
    Name = "ec2-private-sg"
  }
}
## Create Security Group for ALB
resource "aws_security_group" "alb_sg" {
  name        = "terraform_alb_security_group"
  description = "Terraform load balancer security group"
  vpc_id      = "${aws_vpc.terraform-vpc.id}"

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow all outbound traffic.
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
    tags = {
    Name = "alb-sg"
  }
}
##Create 2 EC2 instances(Webservers)
resource "aws_instance" "terraform_server1" {
    ami = "ami-0341aeea105412b57"
    instance_type = "t2.micro"
    vpc_security_group_ids =  [ "${aws_security_group.ec2_sg.id}" ]
    subnet_id = "${aws_subnet.terraform-subnet_1.id}"
    key_name               = "myterraformkey"
    associate_public_ip_address = true
    tags = {
      Name              = "terraform_ec2_server1"
      Environment       = "development"
      Project           = "DEMO-TERRAFORM"
    }
}
resource "aws_instance" "terraform_server2" {
    ami = "ami-0341aeea105412b57"
    instance_type = "t2.micro"
    vpc_security_group_ids =  [ "${aws_security_group.ec2_sg.id}" ]
    subnet_id = "${aws_subnet.terraform-subnet_2.id}"
    key_name               = "myterraformkey"
    associate_public_ip_address = true
    tags = {
      Name              = "Terraform_ec2_server2"
      Environment       = "Development"
      Project           = "Project-TERRAFORM"
    }
}
###Create TargetGroup for ALB
resource "aws_alb_target_group" "group" {
  name     = "terraform-alb-target"
  port     = 443
  protocol = "HTTPS"
  vpc_id   = "${aws_vpc.terraform-vpc.id}"
  stickiness {
    type = "lb_cookie"
  } 
  # Alter the destination of the health check to be the login page.
  health_check {
    path = "/"
    port = 443
    interval=20
  }
}
##Register Targets
resource "aws_lb_target_group_attachment" "reg" {
  target_group_arn = aws_alb_target_group.group.arn
  target_id        = aws_instance.terraform_server1.id
  port             = 80
}
##Create ALB
resource "aws_alb" "alb" {
  name            = "terraform-alb"
  security_groups = ["${aws_security_group.alb_sg.id}"]
  subnets         = ["${aws_subnet.terraform-subnet_1.id}", "${aws_subnet.terraform-subnet_2.id}"]
  tags = {
    Name = "terraform-example-alb"
  }
}
